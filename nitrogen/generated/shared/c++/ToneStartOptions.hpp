///
/// ToneStartOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ToneEnvelopeOptions` to properly resolve imports.
namespace margelo::nitro::morse { struct ToneEnvelopeOptions; }

#include <optional>
#include "ToneEnvelopeOptions.hpp"

namespace margelo::nitro::morse {

  /**
   * A struct which can be represented as a JavaScript object (ToneStartOptions).
   */
  struct ToneStartOptions {
  public:
    double toneHz     SWIFT_PRIVATE;
    std::optional<double> gain     SWIFT_PRIVATE;
    std::optional<ToneEnvelopeOptions> envelope     SWIFT_PRIVATE;

  public:
    ToneStartOptions() = default;
    explicit ToneStartOptions(double toneHz, std::optional<double> gain, std::optional<ToneEnvelopeOptions> envelope): toneHz(toneHz), gain(gain), envelope(envelope) {}
  };

} // namespace margelo::nitro::morse

namespace margelo::nitro {

  // C++ ToneStartOptions <> JS ToneStartOptions (object)
  template <>
  struct JSIConverter<margelo::nitro::morse::ToneStartOptions> final {
    static inline margelo::nitro::morse::ToneStartOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::morse::ToneStartOptions(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "toneHz")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "gain")),
        JSIConverter<std::optional<margelo::nitro::morse::ToneEnvelopeOptions>>::fromJSI(runtime, obj.getProperty(runtime, "envelope"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::morse::ToneStartOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "toneHz", JSIConverter<double>::toJSI(runtime, arg.toneHz));
      obj.setProperty(runtime, "gain", JSIConverter<std::optional<double>>::toJSI(runtime, arg.gain));
      obj.setProperty(runtime, "envelope", JSIConverter<std::optional<margelo::nitro::morse::ToneEnvelopeOptions>>::toJSI(runtime, arg.envelope));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "toneHz"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "gain"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::morse::ToneEnvelopeOptions>>::canConvert(runtime, obj.getProperty(runtime, "envelope"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
