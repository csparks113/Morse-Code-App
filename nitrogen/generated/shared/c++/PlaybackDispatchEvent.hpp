///
/// PlaybackDispatchEvent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `PlaybackDispatchPhase` to properly resolve imports.
namespace margelo::nitro::morse { enum class PlaybackDispatchPhase; }
// Forward declaration of `PlaybackSymbol` to properly resolve imports.
namespace margelo::nitro::morse { enum class PlaybackSymbol; }

#include "PlaybackDispatchPhase.hpp"
#include "PlaybackSymbol.hpp"
#include <optional>

namespace margelo::nitro::morse {

  /**
   * A struct which can be represented as a JavaScript object (PlaybackDispatchEvent).
   */
  struct PlaybackDispatchEvent {
  public:
    PlaybackDispatchPhase phase     SWIFT_PRIVATE;
    PlaybackSymbol symbol     SWIFT_PRIVATE;
    double sequence     SWIFT_PRIVATE;
    double patternStartMs     SWIFT_PRIVATE;
    double expectedTimestampMs     SWIFT_PRIVATE;
    double offsetMs     SWIFT_PRIVATE;
    double durationMs     SWIFT_PRIVATE;
    double unitMs     SWIFT_PRIVATE;
    double toneHz     SWIFT_PRIVATE;
    std::optional<double> scheduledTimestampMs     SWIFT_PRIVATE;
    std::optional<double> leadMs     SWIFT_PRIVATE;
    std::optional<double> actualTimestampMs     SWIFT_PRIVATE;
    std::optional<double> monotonicTimestampMs     SWIFT_PRIVATE;
    std::optional<double> startSkewMs     SWIFT_PRIVATE;
    std::optional<double> batchElapsedMs     SWIFT_PRIVATE;
    std::optional<double> expectedSincePriorMs     SWIFT_PRIVATE;
    std::optional<double> sincePriorMs     SWIFT_PRIVATE;

  public:
    PlaybackDispatchEvent() = default;
    explicit PlaybackDispatchEvent(PlaybackDispatchPhase phase, PlaybackSymbol symbol, double sequence, double patternStartMs, double expectedTimestampMs, double offsetMs, double durationMs, double unitMs, double toneHz, std::optional<double> scheduledTimestampMs, std::optional<double> leadMs, std::optional<double> actualTimestampMs, std::optional<double> monotonicTimestampMs, std::optional<double> startSkewMs, std::optional<double> batchElapsedMs, std::optional<double> expectedSincePriorMs, std::optional<double> sincePriorMs): phase(phase), symbol(symbol), sequence(sequence), patternStartMs(patternStartMs), expectedTimestampMs(expectedTimestampMs), offsetMs(offsetMs), durationMs(durationMs), unitMs(unitMs), toneHz(toneHz), scheduledTimestampMs(scheduledTimestampMs), leadMs(leadMs), actualTimestampMs(actualTimestampMs), monotonicTimestampMs(monotonicTimestampMs), startSkewMs(startSkewMs), batchElapsedMs(batchElapsedMs), expectedSincePriorMs(expectedSincePriorMs), sincePriorMs(sincePriorMs) {}
  };

} // namespace margelo::nitro::morse

namespace margelo::nitro {

  // C++ PlaybackDispatchEvent <> JS PlaybackDispatchEvent (object)
  template <>
  struct JSIConverter<margelo::nitro::morse::PlaybackDispatchEvent> final {
    static inline margelo::nitro::morse::PlaybackDispatchEvent fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::morse::PlaybackDispatchEvent(
        JSIConverter<margelo::nitro::morse::PlaybackDispatchPhase>::fromJSI(runtime, obj.getProperty(runtime, "phase")),
        JSIConverter<margelo::nitro::morse::PlaybackSymbol>::fromJSI(runtime, obj.getProperty(runtime, "symbol")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "sequence")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "patternStartMs")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "expectedTimestampMs")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "offsetMs")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "durationMs")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "unitMs")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "toneHz")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "scheduledTimestampMs")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "leadMs")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "actualTimestampMs")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "monotonicTimestampMs")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "startSkewMs")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "batchElapsedMs")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "expectedSincePriorMs")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "sincePriorMs"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::morse::PlaybackDispatchEvent& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "phase", JSIConverter<margelo::nitro::morse::PlaybackDispatchPhase>::toJSI(runtime, arg.phase));
      obj.setProperty(runtime, "symbol", JSIConverter<margelo::nitro::morse::PlaybackSymbol>::toJSI(runtime, arg.symbol));
      obj.setProperty(runtime, "sequence", JSIConverter<double>::toJSI(runtime, arg.sequence));
      obj.setProperty(runtime, "patternStartMs", JSIConverter<double>::toJSI(runtime, arg.patternStartMs));
      obj.setProperty(runtime, "expectedTimestampMs", JSIConverter<double>::toJSI(runtime, arg.expectedTimestampMs));
      obj.setProperty(runtime, "offsetMs", JSIConverter<double>::toJSI(runtime, arg.offsetMs));
      obj.setProperty(runtime, "durationMs", JSIConverter<double>::toJSI(runtime, arg.durationMs));
      obj.setProperty(runtime, "unitMs", JSIConverter<double>::toJSI(runtime, arg.unitMs));
      obj.setProperty(runtime, "toneHz", JSIConverter<double>::toJSI(runtime, arg.toneHz));
      obj.setProperty(runtime, "scheduledTimestampMs", JSIConverter<std::optional<double>>::toJSI(runtime, arg.scheduledTimestampMs));
      obj.setProperty(runtime, "leadMs", JSIConverter<std::optional<double>>::toJSI(runtime, arg.leadMs));
      obj.setProperty(runtime, "actualTimestampMs", JSIConverter<std::optional<double>>::toJSI(runtime, arg.actualTimestampMs));
      obj.setProperty(runtime, "monotonicTimestampMs", JSIConverter<std::optional<double>>::toJSI(runtime, arg.monotonicTimestampMs));
      obj.setProperty(runtime, "startSkewMs", JSIConverter<std::optional<double>>::toJSI(runtime, arg.startSkewMs));
      obj.setProperty(runtime, "batchElapsedMs", JSIConverter<std::optional<double>>::toJSI(runtime, arg.batchElapsedMs));
      obj.setProperty(runtime, "expectedSincePriorMs", JSIConverter<std::optional<double>>::toJSI(runtime, arg.expectedSincePriorMs));
      obj.setProperty(runtime, "sincePriorMs", JSIConverter<std::optional<double>>::toJSI(runtime, arg.sincePriorMs));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<margelo::nitro::morse::PlaybackDispatchPhase>::canConvert(runtime, obj.getProperty(runtime, "phase"))) return false;
      if (!JSIConverter<margelo::nitro::morse::PlaybackSymbol>::canConvert(runtime, obj.getProperty(runtime, "symbol"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "sequence"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "patternStartMs"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "expectedTimestampMs"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "offsetMs"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "durationMs"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "unitMs"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "toneHz"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "scheduledTimestampMs"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "leadMs"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "actualTimestampMs"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "monotonicTimestampMs"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "startSkewMs"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "batchElapsedMs"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "expectedSincePriorMs"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "sincePriorMs"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
