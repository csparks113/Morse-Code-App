///
/// PlaybackRequest.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `PlaybackSymbol` to properly resolve imports.
namespace margelo::nitro::morse { enum class PlaybackSymbol; }

#include "PlaybackSymbol.hpp"
#include <vector>
#include <optional>

namespace margelo::nitro::morse {

  /**
   * A struct which can be represented as a JavaScript object (PlaybackRequest).
   */
  struct PlaybackRequest {
  public:
    double toneHz     SWIFT_PRIVATE;
    double unitMs     SWIFT_PRIVATE;
    std::vector<PlaybackSymbol> pattern     SWIFT_PRIVATE;
    std::optional<double> gain     SWIFT_PRIVATE;
    std::optional<bool> flashEnabled     SWIFT_PRIVATE;
    std::optional<bool> hapticsEnabled     SWIFT_PRIVATE;
    std::optional<bool> torchEnabled     SWIFT_PRIVATE;
    std::optional<double> flashBrightnessPercent     SWIFT_PRIVATE;
    std::optional<bool> screenBrightnessBoost     SWIFT_PRIVATE;

  public:
    PlaybackRequest() = default;
    explicit PlaybackRequest(double toneHz, double unitMs, std::vector<PlaybackSymbol> pattern, std::optional<double> gain, std::optional<bool> flashEnabled, std::optional<bool> hapticsEnabled, std::optional<bool> torchEnabled, std::optional<double> flashBrightnessPercent, std::optional<bool> screenBrightnessBoost): toneHz(toneHz), unitMs(unitMs), pattern(pattern), gain(gain), flashEnabled(flashEnabled), hapticsEnabled(hapticsEnabled), torchEnabled(torchEnabled), flashBrightnessPercent(flashBrightnessPercent), screenBrightnessBoost(screenBrightnessBoost) {}
  };

} // namespace margelo::nitro::morse

namespace margelo::nitro {

  // C++ PlaybackRequest <> JS PlaybackRequest (object)
  template <>
  struct JSIConverter<margelo::nitro::morse::PlaybackRequest> final {
    static inline margelo::nitro::morse::PlaybackRequest fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::morse::PlaybackRequest(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "toneHz")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "unitMs")),
        JSIConverter<std::vector<margelo::nitro::morse::PlaybackSymbol>>::fromJSI(runtime, obj.getProperty(runtime, "pattern")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "gain")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "flashEnabled")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "hapticsEnabled")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "torchEnabled")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "flashBrightnessPercent")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "screenBrightnessBoost"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::morse::PlaybackRequest& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "toneHz", JSIConverter<double>::toJSI(runtime, arg.toneHz));
      obj.setProperty(runtime, "unitMs", JSIConverter<double>::toJSI(runtime, arg.unitMs));
      obj.setProperty(runtime, "pattern", JSIConverter<std::vector<margelo::nitro::morse::PlaybackSymbol>>::toJSI(runtime, arg.pattern));
      obj.setProperty(runtime, "gain", JSIConverter<std::optional<double>>::toJSI(runtime, arg.gain));
      obj.setProperty(runtime, "flashEnabled", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.flashEnabled));
      obj.setProperty(runtime, "hapticsEnabled", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.hapticsEnabled));
      obj.setProperty(runtime, "torchEnabled", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.torchEnabled));
      obj.setProperty(runtime, "flashBrightnessPercent", JSIConverter<std::optional<double>>::toJSI(runtime, arg.flashBrightnessPercent));
      obj.setProperty(runtime, "screenBrightnessBoost", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.screenBrightnessBoost));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "toneHz"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "unitMs"))) return false;
      if (!JSIConverter<std::vector<margelo::nitro::morse::PlaybackSymbol>>::canConvert(runtime, obj.getProperty(runtime, "pattern"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "gain"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "flashEnabled"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "hapticsEnabled"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "torchEnabled"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "flashBrightnessPercent"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "screenBrightnessBoost"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
