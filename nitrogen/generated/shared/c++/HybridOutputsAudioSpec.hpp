///
/// HybridOutputsAudioSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ToneStartOptions` to properly resolve imports.
namespace margelo::nitro::morse { struct ToneStartOptions; }
// Forward declaration of `PlaybackRequest` to properly resolve imports.
namespace margelo::nitro::morse { struct PlaybackRequest; }

#include "ToneStartOptions.hpp"
#include "PlaybackRequest.hpp"

namespace margelo::nitro::morse {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `OutputsAudio`
   * Inherit this class to create instances of `HybridOutputsAudioSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridOutputsAudio: public HybridOutputsAudioSpec {
   * public:
   *   HybridOutputsAudio(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridOutputsAudioSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridOutputsAudioSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridOutputsAudioSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual bool isSupported() = 0;
      virtual void warmup(const ToneStartOptions& options) = 0;
      virtual void startTone(const ToneStartOptions& options) = 0;
      virtual void stopTone() = 0;
      virtual void playMorse(const PlaybackRequest& request) = 0;
      virtual void teardown() = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "OutputsAudio";
  };

} // namespace margelo::nitro::morse
