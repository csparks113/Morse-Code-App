///
/// WarmupOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>

namespace margelo::nitro::morse {

  /**
   * A struct which can be represented as a JavaScript object (WarmupOptions).
   */
  struct WarmupOptions {
  public:
    double toneHz     SWIFT_PRIVATE;
    std::optional<double> gain     SWIFT_PRIVATE;

  public:
    WarmupOptions() = default;
    explicit WarmupOptions(double toneHz, std::optional<double> gain): toneHz(toneHz), gain(gain) {}
  };

} // namespace margelo::nitro::morse

namespace margelo::nitro {

  // C++ WarmupOptions <> JS WarmupOptions (object)
  template <>
  struct JSIConverter<margelo::nitro::morse::WarmupOptions> final {
    static inline margelo::nitro::morse::WarmupOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::morse::WarmupOptions(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "toneHz")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "gain"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::morse::WarmupOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "toneHz", JSIConverter<double>::toJSI(runtime, arg.toneHz));
      obj.setProperty(runtime, "gain", JSIConverter<std::optional<double>>::toJSI(runtime, arg.gain));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "toneHz"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "gain"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
