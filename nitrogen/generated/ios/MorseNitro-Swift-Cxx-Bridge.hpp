///
/// MorseNitro-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridHapticsSpec` to properly resolve imports.
namespace margelo::nitro::morse { class HybridHapticsSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridHapticsSpec_cxx` to properly resolve imports.
namespace MorseNitro { class HybridHapticsSpec_cxx; }

// Include C++ defined types
#include "HybridHapticsSpec.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <memory>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::morse::bridge::swift {

  // pragma MARK: std::shared_ptr<HybridHapticsSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridHapticsSpec>`.
   */
  using std__shared_ptr_HybridHapticsSpec_ = std::shared_ptr<HybridHapticsSpec>;
  std::shared_ptr<HybridHapticsSpec> create_std__shared_ptr_HybridHapticsSpec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridHapticsSpec_(std__shared_ptr_HybridHapticsSpec_ cppType) noexcept;
  
  // pragma MARK: std::weak_ptr<HybridHapticsSpec>
  using std__weak_ptr_HybridHapticsSpec_ = std::weak_ptr<HybridHapticsSpec>;
  inline std__weak_ptr_HybridHapticsSpec_ weakify_std__shared_ptr_HybridHapticsSpec_(const std::shared_ptr<HybridHapticsSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() noexcept {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) noexcept {
    return Result<void>::withError(error);
  }

} // namespace margelo::nitro::morse::bridge::swift
